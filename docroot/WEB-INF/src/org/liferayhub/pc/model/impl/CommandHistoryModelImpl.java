/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.liferayhub.pc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.liferayhub.pc.model.CommandHistory;
import org.liferayhub.pc.model.CommandHistoryModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CommandHistory service. Represents a row in the &quot;powerconsole_CommandHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.liferayhub.pc.model.CommandHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommandHistoryImpl}.
 * </p>
 *
 * @author Sheikh Sajid
 * @see CommandHistoryImpl
 * @see org.liferayhub.pc.model.CommandHistory
 * @see org.liferayhub.pc.model.CommandHistoryModel
 * @generated
 */
public class CommandHistoryModelImpl extends BaseModelImpl<CommandHistory>
	implements CommandHistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a command history model instance should use the {@link org.liferayhub.pc.model.CommandHistory} interface instead.
	 */
	public static final String TABLE_NAME = "powerconsole_CommandHistory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "mode_", Types.VARCHAR },
			{ "command", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "executionDate", Types.TIMESTAMP },
			{ "executionTime", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table powerconsole_CommandHistory (id_ LONG not null primary key,mode_ VARCHAR(75) null,command VARCHAR(75) null,userId LONG,executionDate DATE null,executionTime LONG)";
	public static final String TABLE_SQL_DROP = "drop table powerconsole_CommandHistory";
	public static final String ORDER_BY_JPQL = " ORDER BY commandHistory.executionDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY powerconsole_CommandHistory.executionDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.liferayhub.pc.model.CommandHistory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.liferayhub.pc.model.CommandHistory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.liferayhub.pc.model.CommandHistory"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.liferayhub.pc.model.CommandHistory"));

	public CommandHistoryModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CommandHistory.class;
	}

	public String getModelClassName() {
		return CommandHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mode", getMode());
		attributes.put("command", getCommand());
		attributes.put("userId", getUserId());
		attributes.put("executionDate", getExecutionDate());
		attributes.put("executionTime", getExecutionTime());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String mode = (String)attributes.get("mode");

		if (mode != null) {
			setMode(mode);
		}

		String command = (String)attributes.get("command");

		if (command != null) {
			setCommand(command);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date executionDate = (Date)attributes.get("executionDate");

		if (executionDate != null) {
			setExecutionDate(executionDate);
		}

		Long executionTime = (Long)attributes.get("executionTime");

		if (executionTime != null) {
			setExecutionTime(executionTime);
		}
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public String getMode() {
		if (_mode == null) {
			return StringPool.BLANK;
		}
		else {
			return _mode;
		}
	}

	public void setMode(String mode) {
		_mode = mode;
	}

	public String getCommand() {
		if (_command == null) {
			return StringPool.BLANK;
		}
		else {
			return _command;
		}
	}

	public void setCommand(String command) {
		_command = command;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public Date getExecutionDate() {
		return _executionDate;
	}

	public void setExecutionDate(Date executionDate) {
		_columnBitmask = -1L;

		_executionDate = executionDate;
	}

	public long getExecutionTime() {
		return _executionTime;
	}

	public void setExecutionTime(long executionTime) {
		_executionTime = executionTime;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CommandHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommandHistory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommandHistory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public CommandHistory toUnescapedModel() {
		return (CommandHistory)this;
	}

	@Override
	public Object clone() {
		CommandHistoryImpl commandHistoryImpl = new CommandHistoryImpl();

		commandHistoryImpl.setId(getId());
		commandHistoryImpl.setMode(getMode());
		commandHistoryImpl.setCommand(getCommand());
		commandHistoryImpl.setUserId(getUserId());
		commandHistoryImpl.setExecutionDate(getExecutionDate());
		commandHistoryImpl.setExecutionTime(getExecutionTime());

		commandHistoryImpl.resetOriginalValues();

		return commandHistoryImpl;
	}

	public int compareTo(CommandHistory commandHistory) {
		int value = 0;

		value = DateUtil.compareTo(getExecutionDate(),
				commandHistory.getExecutionDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommandHistory)) {
			return false;
		}

		CommandHistory commandHistory = (CommandHistory)obj;

		long primaryKey = commandHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CommandHistoryModelImpl commandHistoryModelImpl = this;

		commandHistoryModelImpl._originalUserId = commandHistoryModelImpl._userId;

		commandHistoryModelImpl._setOriginalUserId = false;

		commandHistoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommandHistory> toCacheModel() {
		CommandHistoryCacheModel commandHistoryCacheModel = new CommandHistoryCacheModel();

		commandHistoryCacheModel.id = getId();

		commandHistoryCacheModel.mode = getMode();

		String mode = commandHistoryCacheModel.mode;

		if ((mode != null) && (mode.length() == 0)) {
			commandHistoryCacheModel.mode = null;
		}

		commandHistoryCacheModel.command = getCommand();

		String command = commandHistoryCacheModel.command;

		if ((command != null) && (command.length() == 0)) {
			commandHistoryCacheModel.command = null;
		}

		commandHistoryCacheModel.userId = getUserId();

		Date executionDate = getExecutionDate();

		if (executionDate != null) {
			commandHistoryCacheModel.executionDate = executionDate.getTime();
		}
		else {
			commandHistoryCacheModel.executionDate = Long.MIN_VALUE;
		}

		commandHistoryCacheModel.executionTime = getExecutionTime();

		return commandHistoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mode=");
		sb.append(getMode());
		sb.append(", command=");
		sb.append(getCommand());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", executionDate=");
		sb.append(getExecutionDate());
		sb.append(", executionTime=");
		sb.append(getExecutionTime());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.liferayhub.pc.model.CommandHistory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mode</column-name><column-value><![CDATA[");
		sb.append(getMode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>command</column-name><column-value><![CDATA[");
		sb.append(getCommand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executionDate</column-name><column-value><![CDATA[");
		sb.append(getExecutionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executionTime</column-name><column-value><![CDATA[");
		sb.append(getExecutionTime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CommandHistory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CommandHistory.class
		};
	private long _id;
	private String _mode;
	private String _command;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _executionDate;
	private long _executionTime;
	private long _columnBitmask;
	private CommandHistory _escapedModel;
}